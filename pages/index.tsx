import Head from 'next/head';
import styles from '../styles/Home.module.css';
import sitePermissionsJson from '../mocks/sitePermissions.json';
import ReportTable from '../src/components/ReportTable';

export default function Home() {

  // const sitePermFinal = checkSitePerm(sitePermissions as ISitePermission[]);
  const sitePermissions = sitePermissionsJson as ISitePermission[];

  const relatorio = gerarRelatorio(sitePermissions);


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.container}>

          {/* <pre className={styles.code}>
            {JSON.stringify(relatorio, null, 4)}
          </pre> */}
          <ReportTable relatorio={relatorio} />
        </div>
      </main>
    </>
  )
}

const itemReport: IItemReport = {
  IdDefinicao: null,
  Site: null,
  Entidade: null,
  Verificacao: null,
  HerdaPermissao: null,
  DeveriaHerdarPermissao: null,
  Lista: null,
  IdItem: null,
  TemPermissao: null,
  DeveriaTerPermissao: null,
  Erro: false,
  Mensagem: ''
}

function gerarRelatorio(itens: ISitePermission[]) {

  let final: IItemReport[] = [];

  itens.forEach(item => {

    if (item.TipoEntidade === 'Site')
      final.push(reportInheritance(item, item.SitePermissions.HasUniqueRoleAssignments, 'Site'));

    if (item.TipoEntidade === 'Lista/Biblioteca')
      final.push(reportInheritance(item, item?.ListPermissions?.HasUniqueRoleAssignments || false, 'Lista'));

  })

  return final;
}

function getRandomInt(max: number) {
  return Math.floor(Math.random() * max);
}

function checkSitePerm(perm: ISitePermission) {

  const HerdaPermissao = !perm.SitePermissions.HasUniqueRoleAssignments;
  const DeveriaHerdarPermissao = perm.HerdaPermissoesPai;

  const Erro = HerdaPermissao !== DeveriaHerdarPermissao && perm.SitePermissions.ParentWeb;

  const Mensagem = () => {
    if (!Erro) return null;

    const herdaTxt = "herdando permissões do pai"
    const unicasTxt = "com permissões únicas"
    const herdaCond = HerdaPermissao ? herdaTxt : unicasTxt;
    const deveriaCond = DeveriaHerdarPermissao ? herdaTxt : unicasTxt;

    return (
      <>Site está {herdaCond} enquanto foi definido que ele deveria estar {deveriaCond}.</>
    )
  }

  return {
    IdDefinicao: perm.Id,
    Site: perm.URLSite.Title,
    Entidade: perm.TipoEntidade,
    Verificacao: 'Herança da permissão',
    HerdaPermissao,
    DeveriaHerdarPermissao,
    Lista: null,
    IdItem: null,
    TemPermissao: null,
    DeveriaTerPermissao: null,
    Erro,
    Mensagem: <Mensagem />
  }
}

function reportInheritance(perm: ISitePermission, hasUniqueRoleAssignments: boolean, type: string) {

  const HerdaPermissao = !hasUniqueRoleAssignments;
  const DeveriaHerdarPermissao = perm.HerdaPermissoesPai;

  let Erro = true;
  if (perm.TipoEntidade === 'Site') Erro = HerdaPermissao !== DeveriaHerdarPermissao && perm.SitePermissions.ParentWeb;
  else {
    Erro = HerdaPermissao !== DeveriaHerdarPermissao
  }

  const Mensagem = () => {
    if (!Erro) return null;

    const herdaTxt = "herdando permissões do pai"
    const unicasTxt = "com permissões únicas"
    const herdaCond = HerdaPermissao ? herdaTxt : unicasTxt;
    const deveriaCond = DeveriaHerdarPermissao ? herdaTxt : unicasTxt;

    return (
      <>{type} está {herdaCond} enquanto foi definido que ele deveria estar {deveriaCond}.</>
    )
  }

  return {
    IdDefinicao: perm.Id,
    Site: perm.URLSite.Title,
    Entidade: perm.TipoEntidade,
    Verificacao: 'Herança da permissão',
    HerdaPermissao,
    DeveriaHerdarPermissao,
    Lista: null,
    IdItem: null,
    TemPermissao: null,
    DeveriaTerPermissao: null,
    Erro,
    Mensagem: <Mensagem />
  }

}