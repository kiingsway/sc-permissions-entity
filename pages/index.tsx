import Head from 'next/head';
import styles from '../styles/Home.module.css';
import ReportTable from '../src/components/ReportTable';
import { Permission, fieldGroupsList, roleAssignmentsList } from '../mocks/sitePermDefinition';
import { consoleGroup, getNomeEntidade, getRoleIdsAndNames, isSameArray, joinAnd } from '../src/components/helpers';

enum TipoEntidade {
  Site = "Site",
  Lista = "Lista/Biblioteca",
  Item = "Pasta/Item de Lista/Biblioteca"
}

export default function Home() {

  const preData = {
    sitePermissions: Permission as ISiteDefinition[],
    fieldGroups: fieldGroupsList as IFieldGroup[],
    roleAssignments: roleAssignmentsList as IRoleAssignmentsList,
  }

  const relatorio = gerarRelatorio(preData);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.container}>
          <ReportTable relatorio={relatorio} />
        </div>
      </main>
    </>
  )
}

function gerarRelatorio(preData: IPreData) {

  let report: IItemReport[] = [];

  preData.sitePermissions.forEach(item => {

    // Site
    if (item.TipoEntidade === TipoEntidade.Site) {

      if (typeof item?.SitePermissions?.HasUniqueRoleAssignments === "boolean") {

        if (item?.SitePermissions?.ParentWeb)
          report.push(reportInheritance(item, item.SitePermissions.HasUniqueRoleAssignments));

        report = report.concat(reportPermissions(item, preData));
      }

      else report.push(reportError(item));
    }

    // Lista
    else if (item.TipoEntidade === TipoEntidade.Lista) {

      if (typeof item?.ListPermissions?.HasUniqueRoleAssignments === "boolean") {

        report.push(reportInheritance(item, item.ListPermissions.HasUniqueRoleAssignments));
        report = report.concat(reportPermissions(item, preData));
      }

      else report.push(reportError(item));
    }

    // Outro
    else report.push(reportError(item));

  });

  return report;
}

function reportError(perm: ISiteDefinition) {

  return {
    IdDefinicao: perm.Id,
    Site: perm.URLSite.Title,
    Entidade: perm.TipoEntidade,
    NomeEntidade: null,
    Verificacao: "❌ Erro na verificação",
    HerdaPermissao: null,
    DeveriaHerdarPermissao: null,
    Lista: null,
    IdItem: null,
    TemPermissao: null,
    DeveriaTerPermissao: null,
    Erro: true,
    Mensagem: "Não foi possível verificar a permissão desse item"
  }
}

function reportInheritance(perm: ISiteDefinition, hasUniqueRoleAssignments: boolean) {

  const HerdaPermissao = !hasUniqueRoleAssignments;
  const DeveriaHerdarPermissao = perm.HerdaPermissoesPai;

  const Erro = perm.TipoEntidade === TipoEntidade.Site ?
    HerdaPermissao !== DeveriaHerdarPermissao && Boolean(perm.SitePermissions.ParentWeb) :
    HerdaPermissao !== DeveriaHerdarPermissao;

  enum txt {
    herda = "herdando permissões do pai",
    unica = "com permissões exclusivas"
  }

  const cond = {
    herda: HerdaPermissao ? txt.herda : txt.unica,
    deveria: DeveriaHerdarPermissao ? txt.herda : txt.unica
  }

  const Mensagem = Erro ? `${perm.TipoEntidade} está ${cond.herda} e não deveria. O correto é estar ${cond.deveria}.` : null;

  return {
    IdDefinicao: perm.Id,
    Site: perm.URLSite.Title,
    Entidade: perm.TipoEntidade,
    NomeEntidade: getNomeEntidade(perm),
    Verificacao: "Herança da permissão",
    HerdaPermissao,
    DeveriaHerdarPermissao,
    Lista: null,
    IdItem: null,
    TemPermissao: null,
    DeveriaTerPermissao: null,
    Erro,
    Mensagem
  }

}

function reportPermissions(perm: ISiteDefinition, preData: IPreData) {

  let reports: IItemReport[] = [];

  const report: IItemReport = {
    IdDefinicao: perm.Id,
    Site: perm.URLSite.Title,
    Entidade: perm.TipoEntidade,
    NomeEntidade: getNomeEntidade(perm),
    Verificacao: "Grupo",
    HerdaPermissao: true,
    DeveriaHerdarPermissao: true,
    Lista: null,
    IdItem: null,
    TemPermissao: null,
    DeveriaTerPermissao: null,
    Erro: true,
    Mensagem: ""
  }

  // Passar pelos grupos que estão no Sharepoint e depois criar uma linha apenas para mostrar se tem grupos a mais na permissão.

  const groups = getRoleIdsAndNames(preData, perm);

  const RoleAss = {
    [`${TipoEntidade.Site}`]: perm.SitePermissions.RoleAssignments,
    [`${TipoEntidade.Lista}`]: perm?.ListPermissions?.RoleAssignments,
  }
  const Role = RoleAss[perm.TipoEntidade];
  const RoleAssignments: any[] = Array.isArray(Role) && Role && Role?.length ? Role : [];

  const groupReports = groups.map(g => {
    const permOnSite: IRoleAssignment = RoleAssignments.filter(r => r.Member.Title === g.Title)[0];
    const permOnSiteNames = permOnSite ? permOnSite.RoleDefinitionBindings.filter(r => r.Name !== "Acesso Limitado").map(r => r.Name).sort() : null
    const permOnSiteIds = permOnSite ? permOnSite.RoleDefinitionBindings.filter(r => r.Name !== "Acesso Limitado").map(r => r.Id).sort() : null

    // Verificar se grupo da definição está preenchido.
    if (g.RoleIds && g.RoleIds.length) {
      // Caso na definição esteja preenchido, verificar se grupo possui permissão no site.
      if (permOnSite) {
        // Caso possua, verificar se os níveis de permissões setados para ele no site estão iguais da definição.
        const Erro = !isSameArray(g?.RoleIds, permOnSiteIds);
        if(Erro) {
          console.group('erro');
          consoleGroup('g?.RoleIds', g)
          consoleGroup('permOnSiteIds', permOnSiteIds)
          console.groupEnd();
        }
        // Caso não possua permissão no site ou os níveis de permissões setados estejam diferentes, enviar um erro.
        const Mensagem = Erro ? `Grupo não possui as mesmas permissões no site. Deveria ter as permissões: ${joinAnd(g.RoleNames)}. Mas possui: ${joinAnd(permOnSiteNames)}` : "";

        return {
          ...report,
          Mensagem,
          Erro,
          Verificacao: `Grupo: "${g.Title}"`,
        };

      } else {
        // Caso não possua permissão no site ou os níveis de permissões setados estejam diferentes, enviar um erro.
        const Erro = !Boolean(permOnSite);
        const Mensagem = Erro ? `Grupo não encontrado no site.` : "";

        return {
          ...report,
          Verificacao: `Grupo: "${g.Title}"`,
          Erro,
          Mensagem
        };
      }
    }
    // Caso não esteja preenchido, verificar permissões no site.
    else {
      const Erro = Boolean(permOnSite);
      const Mensagem = Erro ? `O grupo está definido para não ter nenhuma permissão, entretanto o site possui permissão para esse grupo. As permissões: ${joinAnd(permOnSiteNames)}.` : "O grupo não possui permissão no site";
      return {
        ...report,
        Verificacao: `Grupo: "${g.Title}"`,
        Erro,
        Mensagem
      };
    }

  });

  const qtdPermissoesDefinidas = groups.filter(g => g.RoleSpIds).length;
  const qtdPermissoesNaEntidade = RoleAssignments.length;

  console.group(perm.Title)
  consoleGroup('RoleAssignments', RoleAssignments)
  console.groupEnd();

  if (qtdPermissoesDefinidas !== qtdPermissoesNaEntidade) {
    reports.push({
      ...report,
      Erro: true,
      Verificacao: "Quantidade de permissões na entidade",
      Mensagem: `O site possui permissões para grupos que não estão definidos nas colunas. Quantidade de colunas de grupos definidas: ${qtdPermissoesDefinidas}. Quantidade de permissões no site: ${qtdPermissoesNaEntidade}`
    })
  }

  reports = reports.concat(groupReports);

  return reports
}